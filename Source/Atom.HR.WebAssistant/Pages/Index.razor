@page "/"
@using Syncfusion.Blazor.Layouts
@using Syncfusion.Blazor.Navigations
@using Syncfusion.Blazor.Maps
@using Syncfusion.Blazor.Charts
@using Atom.HR.Shared
@using Syncfusion.Blazor.CircularGauge

@inject NavigationManager NavigationManager
@inject Atom.HR.WebAssistant.Areas.Storage.PersonProfileService PersonProfileService

<SfDashboardLayout CellSpacing="@CellSpacing" Columns="@Columns" CellAspectRatio="@AspectRatio">
    <DashboardLayoutPanels>
        <DashboardLayoutPanel Id=" 0" Row="0" Col="0" SizeX="1" SizeY="1">
            <HeaderTemplate><div>Кадры</div></HeaderTemplate>
            <ContentTemplate>
                <div style="height:100%; width:100%">
                    <SfAccumulationChart HtmlAttributes="ChartAttribute" @ref="ActiveVisitorsInstance" EnableAnimation="true" EnableSmartLabels="true" Width="100%" Height="100%">
                        <AccumulationChartTooltipSettings Enable="true"></AccumulationChartTooltipSettings>
                        <AccumulationChartLegendSettings Visible="false"></AccumulationChartLegendSettings>
                        <AccumulationChartSeriesCollection>
                            <AccumulationChartSeries DataSource="@ProfileTypes" XName="@nameof(Info2.Name)" YName="@nameof(Info2.Count)" InnerRadius="35%" Radius="100%" Name="Количество">
                                <AccumulationDataLabelSettings Visible="true" Name="text">
                                    <AccumulationChartDataLabelFont FontWeight="600" Color="white" Size="14px"></AccumulationChartDataLabelFont>
                                </AccumulationDataLabelSettings>
                            </AccumulationChartSeries>
                        </AccumulationChartSeriesCollection>
                    </SfAccumulationChart>
                </div>
            </ContentTemplate>
        </DashboardLayoutPanel>
        <DashboardLayoutPanel Id=" 1" Row="0" Col="2" SizeX="2" SizeY="2">
            <HeaderTemplate><div>Вакансии</div></HeaderTemplate>
            <ContentTemplate>               
                    <SfChart HtmlAttributes="ChartAttribute" @ref="VacanciesStatus">
                        <ChartArea><ChartAreaBorder Width="0"></ChartAreaBorder></ChartArea>
                        <ChartPrimaryXAxis ValueType="Syncfusion.Blazor.Charts.ValueType.Category">
                            <ChartAxisMajorGridLines Width="0"></ChartAxisMajorGridLines>
                        </ChartPrimaryXAxis>
                        <ChartPrimaryYAxis EdgeLabelPlacement="EdgeLabelPlacement.Shift">
                        </ChartPrimaryYAxis>
                        <ChartSeriesCollection>
                            <ChartSeries DataSource="@DataSource" XName="x" YName="y" Width="2" Name="Закрытые" Type="ChartSeriesType.StackingBar100">
                            </ChartSeries>
                            <ChartSeries DataSource="@DataSource" XName="x" YName="y1" Width="2" Name="Открытые" Type="ChartSeriesType.StackingBar100">
                            </ChartSeries>
                            <ChartSeries DataSource="@DataSource" XName="x" YName="y2" Width="2" Name="В процессе" Type="ChartSeriesType.StackingBar100">
                            </ChartSeries>
                        </ChartSeriesCollection>
                        <ChartTooltipSettings Enable="true" Format="${point.x} : <b>${point.y} (${point.percentage}%)</b>"></ChartTooltipSettings>
                    </SfChart>               
            </ContentTemplate>
        </DashboardLayoutPanel>
        <DashboardLayoutPanel Id=" 2" Row="0" Col="2" SizeX="2" SizeY="2">
            <HeaderTemplate><div>Средняя скорость закрытия вакансий</div></HeaderTemplate>
            <ContentTemplate>                
                    @*<SfCircularGauge @ref="VacanciesSpeed">
                        <CircularGaugeAxes>
                            <CircularGaugeAxis Radius="80%" StartAngle="210" EndAngle="150" Minimum="0" Maximum="100">
                                <CircularGaugeAxisLabelStyle Offset="10">
                                    <CircularGaugeAxisLabelFont Size="12px" FontFamily="Roboto" FontWeight="Regular" />
                                </CircularGaugeAxisLabelStyle>
                                <CircularGaugeAxisLineStyle Width="0" Color="transparent" />
                                <CircularGaugeAxisMajorTicks Width="0" Interval="10" />
                                <CircularGaugeAxisMinorTicks Width="0" />
                                <CircularGaugePointers>
                                    <CircularGaugePointer NeedleStartWidth="2" Value="65" Radius="85%" Color="#E63B86" PointerWidth="12">
                                        <LinearGradient StartValue="@PointerLinearStart" EndValue="@PointerLinearEnd">
                                            <ColorStops>
                                                <ColorStop Opacity="0.9" Offset="0%" Color="#FEF3F9"></ColorStop>
                                                <ColorStop Opacity="0.9" Offset="70%" Color="#E63B86"></ColorStop>
                                            </ColorStops>
                                        </LinearGradient>
                                        <RadialGradient Radius="@PointerRadialRadius">
                                            <InnerPosition X="@PointerInnerX" Y="@PointerInnerY"></InnerPosition>
                                            <OuterPosition X="@PointerOuterX" Y="@PointerOuterY"></OuterPosition>
                                            <ColorStops>
                                                <ColorStop Opacity="0.9" Offset="0%" Color="#FEF3F9"></ColorStop>
                                                <ColorStop Opacity="0.9" Offset="60%" Color="#E63B86"></ColorStop>
                                            </ColorStops>
                                        </RadialGradient>
                                        <CircularGaugePointerAnimation Enable="true"></CircularGaugePointerAnimation>
                                        <CircularGaugeCap Radius="12" Color="White">
                                            <CircularGaugeCapBorder Width="2.5" Color="#E63B86" />
                                        </CircularGaugeCap>
                                        <CircularGaugeNeedleTail Length="0%"></CircularGaugeNeedleTail>
                                    </CircularGaugePointer>
                                </CircularGaugePointers>
                                <CircularGaugeRanges>
                                    <CircularGaugeRange RoundedCornerRadius="10" Color="#E63B86" Start="0" End="100" StartWidth="18" EndWidth="18">
                                        <LinearGradient StartValue="@RangeLinearStart" EndValue="@RangeLinearEnd">
                                            <ColorStops>
                                                <ColorStop Opacity="0.9" Offset="0%" Color="#9E40DC"></ColorStop>
                                                <ColorStop Opacity="0.9" Offset="70%" Color="#E63B86"></ColorStop>
                                            </ColorStops>
                                        </LinearGradient>
                                        <RadialGradient Radius="@RangeRadialRadius">
                                            <InnerPosition X="@RangeInnerX" Y="@RangeInnerY"></InnerPosition>
                                            <OuterPosition X="@RangeOuterX" Y="@RangeOuterY"></OuterPosition>
                                            <ColorStops>
                                                <ColorStop Opacity="0.9" Offset="90%" Color="#9E40DC"></ColorStop>
                                                <ColorStop Opacity="0.9" Offset="160%" Color="#E63B86"></ColorStop>
                                            </ColorStops>
                                        </RadialGradient>
                                    </CircularGaugeRange>
                                </CircularGaugeRanges>
                            </CircularGaugeAxis>
                        </CircularGaugeAxes>
                    </SfCircularGauge>*@                
            </ContentTemplate>
        </DashboardLayoutPanel>
    </DashboardLayoutPanels>
</SfDashboardLayout>

@code {

    public double[] CellSpacing = { 5, 5 };
    public int Columns = 6;
    public double AspectRatio = 100 / 85;

    SfAccumulationChart ActiveVisitorsInstance;
    SfChart VacanciesStatus;
    SfDashboardLayout dashboardObject;
    SfCircularGauge VacanciesSpeed;

    List<Info2> ProfileTypes { get; set; } = new List<Info2>();

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        //OnAfterRenderAsync will be triggered after the component rendered.
        await Task.Delay(2500);
        // refreshing all the chart and map components to fit within the panel
        this.ActiveVisitorsInstance.Refresh();
        VacanciesStatus.Refresh();
    }

    protected override async Task OnInitializedAsync()
    {
        ProfileTypes = await PersonProfileService.GetTypesProfiles();
    }

    Dictionary<string, object> ChartAttribute = new Dictionary<string, object>()
{
        { "class", "custom-chart" }
    };

    public class StackedBar100ChartData
    {
        public string x { get; set; }
        public double y { get; set; }
        public double y1 { get; set; }
        public double y2 { get; set; }
    }
    public List<StackedBar100ChartData> DataSource = new List<StackedBar100ChartData>
{
        new StackedBar100ChartData { x= "Jan", y= 6, y1=6, y2=1 },
        new StackedBar100ChartData { x= "Feb", y= 8, y1=8, y2=1.5 },
        new StackedBar100ChartData { x= "Mar", y= 12, y1=11, y2=2 },
        new StackedBar100ChartData { x= "Apr", y= 15, y1=16, y2=2.5 },
        new StackedBar100ChartData { x= "May", y= 20, y1=21, y2=3 },
        new StackedBar100ChartData { x= "Jun", y= 24, y1=25, y2=3.5 }
    };

    #region Скорость закрытия вакансий
    public string StartValue = "0%";
    public string EndValue = "100%";
    public string RadialValue = "50%";
    public string PointerLinearStart;
    public string PointerLinearEnd;
    public string RangeLinearStart;
    public string RangeLinearEnd;
    public string PointerRadialRadius;
    public string PointerInnerX;
    public string PointerInnerY;
    public string PointerOuterX;
    public string PointerOuterY;
    public string RangeRadialRadius;
    public string RangeInnerX;
    public string RangeInnerY;
    public string RangeOuterX;
    public string RangeOuterY;
    private string GradientValueTypeValue = "Linear Gradient";
    private string ElementValueTypeValue = "Range";
    public class GradientValueType
    {
        public string Name { get; set; }
    }
    public List<GradientValueType> GradientDataSource = new List<GradientValueType> {
        new GradientValueType{ Name = "Linear Gradient"},
        new GradientValueType{ Name = "Radial Gradient"}
    };
    public class ElementValueType
    {
        public string Name { get; set; }
    }
    public List<ElementValueType> ElementData = new List<ElementValueType> {
        new ElementValueType{ Name = "Range"},
        new ElementValueType{ Name = "Pointer"}
    };
    protected override void OnInitialized()
    {
        RangeLinearStart = StartValue;
        RangeLinearEnd = EndValue;
    }
    private void GradientValueTypeChange(Syncfusion.Blazor.DropDowns.ChangeEventArgs<string, GradientValueType> args)
    {
        GradientValueTypeValue = args.Value;
        UpdateGauge();
    }
    private void ElementValueTypeChange(Syncfusion.Blazor.DropDowns.ChangeEventArgs<string, ElementValueType> args)
    {
        ElementValueTypeValue = args.Value;
        UpdateGauge();
    }
    private void UpdateGauge()
    {
        if (GradientValueTypeValue == "Linear Gradient" && ElementValueTypeValue == "Range")
        {
            RangeLinearStart = StartValue;
            RangeLinearEnd = EndValue;
            PointerLinearEnd = PointerLinearStart = string.Empty;
            RangeRadialRadius = RangeInnerX = RangeInnerY = RangeOuterX = RangeOuterY = string.Empty;
            PointerRadialRadius = PointerInnerX = PointerInnerY = PointerOuterX = PointerOuterY = string.Empty;
        }
        if (GradientValueTypeValue == "Linear Gradient" && ElementValueTypeValue == "Pointer")
        {
            RangeLinearStart = RangeLinearEnd = string.Empty;
            PointerLinearEnd = EndValue;
            PointerLinearStart = StartValue;
            RangeRadialRadius = RangeInnerX = RangeInnerY = RangeOuterX = RangeOuterY = string.Empty;
            PointerRadialRadius = PointerInnerX = PointerInnerY = PointerOuterX = PointerOuterY = string.Empty;
        }
        if (GradientValueTypeValue == "Radial Gradient" && ElementValueTypeValue == "Range")
        {
            RangeLinearStart = RangeLinearEnd = PointerLinearEnd = PointerLinearStart = string.Empty;
            PointerRadialRadius = PointerInnerX = PointerInnerY = PointerOuterX = PointerOuterY = string.Empty;
            RangeRadialRadius = RangeInnerX = RangeInnerY = RangeOuterX = RangeOuterY = RadialValue;
        }
        if (GradientValueTypeValue == "Radial Gradient" && ElementValueTypeValue == "Pointer")
        {
            PointerLinearStart = PointerLinearEnd = RangeLinearStart = RangeLinearEnd = string.Empty;
            RangeRadialRadius = RangeInnerX = RangeInnerY = RangeOuterX = RangeOuterY = string.Empty;
            PointerRadialRadius = PointerInnerX = PointerInnerY = PointerOuterX = PointerOuterY = RadialValue;
        }
        #endregion
    }
}
<style>
    .custom-chart {
        width: 100%;
        height: 100%;
    }

    [class^="sf-icon-"],
    [class*=" sf-icon-"] {
        font-family: "e-sb-icons" !important;
        speak: none;
        font-size: 55px;
        font-style: normal;
        font-weight: normal;
        font-variant: normal;
        text-transform: none;
        line-height: 1;
        -webkit-font-smoothing: antialiased;
        -moz-osx-font-smoothing: grayscale;
    }
</style>
<style>
    td {
        width: 40%;
    }

    .value {
        margin-left: 10px;
    }

    .templateText {
        font-family: Regular;
        margin-left: -33px
    }

    tr {
        height: 40px;
    }
</style>