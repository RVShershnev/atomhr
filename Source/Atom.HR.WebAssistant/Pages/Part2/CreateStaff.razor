@page "/createvacancy"
@page "/vacancies/{Id}"
@using Syncfusion.Blazor.Popups
@using Syncfusion.Blazor.Buttons
@using Syncfusion.Blazor.RichTextEditor
@using Syncfusion.Blazor.DropDowns
@using Syncfusion.Blazor.Calendars
@using Atom.HR.Models
@inject Atom.HR.WebAssistant.Areas.Storage.VacancyService VacancyService
@inject Microsoft.AspNetCore.Components.NavigationManager UriHelper
@inject Atom.HR.WebAssistant.Areas.AI.AIService AIService
<h3>Создать вакансию</h3>
<div class="row">
    <SfComboBox TValue="string" TItem="TypeVacancy" PopupHeight="230px" Placeholder="Выберите тип вакансии" @bind-Value="@DropVal" DataSource="@Games">
        <ComboBoxEvents TValue="string" TItem="TypeVacancy" ValueChange="OnChange"></ComboBoxEvents>
        <ComboBoxFieldSettings Text="Text" Value="ID"></ComboBoxFieldSettings>
    </SfComboBox>
</div>
<div class="row">
    <SfTextBox Placeholder="Название вакансии" FloatLabelType="@FloatLabelType.Auto" @bind-Value="@vacancy.Name"></SfTextBox>
</div>
<div class="row">
    <SfMultiSelect TValue="string[]" Placeholder="навыки" DataSource="@Skills" Mode="@VisualMode.Default" AllowCustomValue="true" @bind-Value="@MulVal">
        <MultiSelectFieldSettings Text="Name" Value="Name"></MultiSelectFieldSettings>
    </SfMultiSelect>
</div>
<div class="row">
    <SfButton IsPrimary="true" OnClick="GetRecomendation">Получить рекомендации</SfButton>
</div>
<h5>Описание вакансии</h5>
<div class="row">
    <SfRichTextEditor ShowCharCount="true" MaxLength="2000" @bind-Value="@vacancy.Description">
        <ChildContent>
            <RichTextEditorToolbarSettings Items="@Tools" />
        </ChildContent>
    </SfRichTextEditor>
</div>
@if (this.vacancy.Type == "Командная")
{
    <div class="row">
        <p>Бюджет на проект</p>
        <div class="col">
            <SfNumericTextBox TValue="double?" Min="@setMin" Max="@setMax" Value=1000000 Step=@setIncrement></SfNumericTextBox>
        </div>
        <div class="col">
            <SfNumericTextBox TValue="double?" Min="@setMin" Max="@setMax" Value=1500000 Step=@setIncrement></SfNumericTextBox>
        </div>
    </div>
    <div class="row">
        <div class="col">
            <p>Срок закрытия вакансий</p>
        </div>
        <div class="col">
            <SfCheckBox @bind-Checked="@isChecked" Label="Без срока"></SfCheckBox>
        </div>
    </div>
    <div class="row">
        <SfDatePicker TValue="DateTime?" Placeholder="Выберите даты"></SfDatePicker>
    </div>
    <div class="row">
        <div class="col">
            <p>Срок проекта</p>
        </div>
        <div class="col">
            <SfCheckBox @bind-Checked="@isCheckedRange" Label="Без срока"></SfCheckBox>
        </div>
    </div>
    <div class="row">
        <SfDateRangePicker Placeholder="Выберите даты" Min="@MinDate" Max="@MaxDate"></SfDateRangePicker>
    </div>
}
else
{
    <div class="row">
        <div class="col">
            <p>Срок закрытия вакансий</p>
        </div>
        <div class="col">
            <SfCheckBox @bind-Checked="@isChecked" Label="Без срока"></SfCheckBox>
        </div>
    </div>
    <div class="row">
        <SfDatePicker TValue="DateTime?" Placeholder="Choose a Date"></SfDatePicker>
    </div>
    <div class="row">
        <div class="col">
            <p>Срок проекта</p>
        </div>
        <div class="col">
            <SfCheckBox @bind-Checked="@isCheckedRange" Label="Без срока"></SfCheckBox>
        </div>
    </div>
    <div class="row">
        <SfDateRangePicker Placeholder="Выберите даты" Min="@MinDate" Max="@MaxDate"></SfDateRangePicker>
    </div>
    <div class="row">
        <div class="row">
            <p>Рекомендация по зарплате</p>
        </div>
    <div class="row">
        <div class="col">
            <p>Минимальная</p>
        </div>
        <div class="col">
            <SfNumericTextBox TValue="double?" Readonly="true" Value="@aiData.Min"></SfNumericTextBox>
        </div>
        <div class="col">
            <p>Максимальная</p>
        </div>
        <div class="col">
            <SfNumericTextBox TValue="double?" Readonly="true" Value="@aiData.Max"></SfNumericTextBox>
        </div>
        <div class="col">
            <p>Медиана</p>
        </div>
        <div class="col">
            <SfNumericTextBox TValue="double?" Readonly="true" Value="@aiData.Med"></SfNumericTextBox>
        </div>
        <div class="col">
            <p>Среднее</p>
        </div>
        <div class="col">
            <SfNumericTextBox TValue="double?" Readonly="true" Value="@aiData.Avg"></SfNumericTextBox>
        </div>
    </div>
</div>
    <p>Зарплата</p>
    <div class="col">
        <SfNumericTextBox TValue="double?" Min="@setMin" Max="@setMax" Value=20000 Step=@setIncrement></SfNumericTextBox>
    </div>
    <div class="col">
        <SfNumericTextBox TValue="double?" Min="@setMin" Max="@setMax" Value=100000 Step=@setIncrement></SfNumericTextBox>
    </div>
}


<div class="row">
    <SfButton IsPrimary="true" OnClick="Create">Создать</SfButton>
</div>

@if (vacancy.ChallengeId == null || vacancy.ChallengeId == "")
{  
    <div class="content-wrapper">
        <div class="row">
            <SfButton IsPrimary="true" OnClick="CreateChellenge">Добавить Челендж!!!</SfButton>
        </div>
    </div>
}
else
{
    <div class="content-wrapper">
        <div class="row">
            <SfButton IsPrimary="true" OnClick="ViewChellenge">Изменить Челендж!!!</SfButton>
        </div>
    </div>
}
@if(chc)
{
<Atom.HR.WebAssistant.Pages.Part1.CreateChallenge @ref="challenge" vacancy="@vacancy">

</Atom.HR.WebAssistant.Pages.Part1.CreateChallenge>
}
@code {

    #region AiData
    public string[] MulVal = null;
    string specName = "";
    AiData aiData = new AiData();

    bool chc = false;

    Atom.HR.WebAssistant.Pages.Part1.CreateChallenge challenge { get; set; }

    public class AiData
    {
        public double Min { get; set; }
        public double Max { get; set; }
        public double Med { get; set; }
        public double Avg { get; set; }
    }
    #endregion
    private double? setMin { get; set; } = 0;
    private double? setMax { get; set; } = double.MaxValue;
    private double? setIncrement { get; set; } = 1;
    private double? stepMin { get; set; } = 1;
    List<Skill> Skills { get; set; } = new List<Skill>();
    private bool isCheckedRange = true;
    private bool isChecked = true;
    public DateTime MinDate { get; set; } = DateTime.Now;
    public DateTime MaxDate { get; set; } = DateTime.Now.AddDays(1095);

    [Parameter]
    public string Id { get; set; }
    bool isNewProfile { get; set; } = false;

    bool IsSendMessage { get; set; }

    Raven.Client.Documents.Session.IDocumentSession session;

    Atom.HR.Models.Vacancy vacancy { get; set; } = new Models.Vacancy();

    protected override async Task OnInitializedAsync()
    {
        Skills = await VacancyService.GetAllSkills();
        session = VacancyService.GetSession();
        if (Id == null)
        {
            isNewProfile = true;
        }
        if (Id != null && Id != "")
        {

            var result = session.Load<Vacancy>(Id.Replace('_', '/'));
            if (result != null)
            {
                vacancy = result;
            }
            else
            {
                vacancy = new Vacancy();
                isNewProfile = true;
            }
        }
    }
    protected async Task GetRecomendation()
    {
        var query = "";
        for (var i = 0; i < MulVal.Length; i++)
        {
            query += MulVal[i] + " ";
        }
        var t = await AIService.GetSpecialization(query.TrimEnd(' '));

        var q = await AIService.GetPrice(t);

        try
        {
            var qq = q.Split(',');
            aiData.Min = Convert.ToDouble(qq[0]);
            aiData.Avg = Convert.ToDouble(qq[1]);
            aiData.Max = Convert.ToDouble(qq[2]);
            aiData.Med = Convert.ToDouble(qq[3]);
            StateHasChanged();
        }
        catch (Exception e)
        {

        }
    }

    protected void Create()
    {
        if (isNewProfile)
        {
            session.Store(vacancy);
        }
        session.SaveChanges();
        session.Dispose();
        UriHelper.NavigateTo("/vacancies");
    }
    protected void CreateChellenge()
    {
        chc = true;
        StateHasChanged();

    }
    protected void ViewChellenge()
    {
        chc = true;
        StateHasChanged();
    }

    private List<ToolbarItemModel> Tools = new List<ToolbarItemModel>()
{
        new ToolbarItemModel() { Command = ToolbarCommand.Bold },
        new ToolbarItemModel() { Command = ToolbarCommand.Italic },
        new ToolbarItemModel() { Command = ToolbarCommand.Underline },
        new ToolbarItemModel() { Command = ToolbarCommand.StrikeThrough },
        new ToolbarItemModel() { Command = ToolbarCommand.FontName },
        new ToolbarItemModel() { Command = ToolbarCommand.FontSize },
        new ToolbarItemModel() { Command = ToolbarCommand.FontColor },
        new ToolbarItemModel() { Command = ToolbarCommand.BackgroundColor },
        new ToolbarItemModel() { Command = ToolbarCommand.LowerCase },
        new ToolbarItemModel() { Command = ToolbarCommand.UpperCase },
        new ToolbarItemModel() { Command = ToolbarCommand.SuperScript },
        new ToolbarItemModel() { Command = ToolbarCommand.SubScript },
        new ToolbarItemModel() { Command = ToolbarCommand.Separator },
        new ToolbarItemModel() { Command = ToolbarCommand.Formats },
        new ToolbarItemModel() { Command = ToolbarCommand.Alignments },
        new ToolbarItemModel() { Command = ToolbarCommand.OrderedList },
        new ToolbarItemModel() { Command = ToolbarCommand.UnorderedList },
        new ToolbarItemModel() { Command = ToolbarCommand.Outdent },
        new ToolbarItemModel() { Command = ToolbarCommand.Indent },
        new ToolbarItemModel() { Command = ToolbarCommand.Separator },
        new ToolbarItemModel() { Command = ToolbarCommand.CreateLink },
        new ToolbarItemModel() { Command = ToolbarCommand.Image },
        new ToolbarItemModel() { Command = ToolbarCommand.CreateTable },
        new ToolbarItemModel() { Command = ToolbarCommand.Separator },
        new ToolbarItemModel() { Command = ToolbarCommand.ClearFormat },
        new ToolbarItemModel() { Command = ToolbarCommand.Print },
        new ToolbarItemModel() { Command = ToolbarCommand.SourceCode },
        new ToolbarItemModel() { Command = ToolbarCommand.Separator },
        new ToolbarItemModel() { Command = ToolbarCommand.Undo },
        new ToolbarItemModel() { Command = ToolbarCommand.Redo }
    };

    public class TypeVacancy
    {
        public string ID { get; set; }
        public string Text { get; set; }
    }
    private List<TypeVacancy> Games = new List<TypeVacancy>() {
        new TypeVacancy(){ ID= "1", Text= "Единичная" },
        new TypeVacancy(){ ID= "2", Text= "Командная" }
     };

    public string DropVal = "Единичная";
    public string ChangeValue { get; set; } = "Basketball";
    public void OnChange(Syncfusion.Blazor.DropDowns.ChangeEventArgs<string, TypeVacancy> args)
    {
        this.vacancy.Type = args.ItemData?.Text;
    }
}
<style>
    .control_wrapper {
        width: 350px;
        margin: 0 auto;
        padding-top: 70px;
    }
</style>
